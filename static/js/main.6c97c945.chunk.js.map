{"version":3,"sources":["components/feedbackOptions/FeedbackOptions.jsx","components/section/Section.jsx","components/statistics/Statistics.jsx","components/feedback/Feedback.jsx","App.js","index.js"],"names":["FeedbackOptions","handleInc","name","onClick","Section","title","children","Statistics","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","propsTypes","PropTypes","number","func","isRequired","Feedback","useState","setGood","setNeutral","setBad","event","target","prevState","Math","round","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAsBeA,EApBS,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACzB,OACE,qCACE,wBAAQC,KAAK,OAAOC,QAASF,EAA7B,kBAGA,wBAAQC,KAAK,UAAUC,QAASF,EAAhC,qBAGA,wBAAQC,KAAK,MAAMC,QAASF,EAA5B,qBCFSG,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IACJC,M,gBCFDC,EAAa,SAAC,GAMb,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,gCAEA,OACE,mCACE,+BACE,6BACE,uCAAUJ,OAEZ,6BACE,0CAAaC,OAEf,6BACE,sCAASC,OAEX,6BACE,wCAAWC,SAEb,6BACE,mDAAsBC,IAAtB,eAOVL,EAAWM,WAAa,CACtBL,KAAMM,IAAUC,OAChBN,QAASK,IAAUC,OACnBL,IAAKI,IAAUC,OACfJ,mBAAoBG,IAAUE,KAC9BJ,gCAAiCE,IAAUE,MAC3CC,WAEaV,QC2BAW,EA9DE,WACf,MAAsBC,mBAAS,GAA/B,mBAAOX,EAAP,KAAaY,EAAb,KACA,EAA4BD,mBAAS,GAArC,mBAAOV,EAAP,KAAgBY,EAAhB,KACA,EAAoBF,mBAAS,GAA7B,mBAAOT,EAAP,KAAYY,EAAZ,KAyBMX,EAAqB,WACzB,OAAOH,EAAOC,EAAUC,GASxB,OACE,qCACE,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBJ,UAnCP,SAACsB,GAGjB,OAFaA,EAAMC,OAAOtB,MAGxB,IAAK,OAEH,YADAkB,GAAQ,SAAAK,GAAS,OAAIA,EAAY,KAEnC,IAAK,UAEH,YADAJ,GAAW,SAAAI,GAAS,OAAIA,EAAY,KAEtC,IAAK,MAEH,YADAH,GAAO,SAAAG,GAAS,OAAIA,EAAY,KAGlC,QACE,aAuBA,cAAC,EAAD,CAASpB,MAAM,aAAf,SACGM,IACC,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,mBAAoBA,EACpBC,gCAnB4B,WACtC,OAAOc,KAAKC,MACPnB,EAAOG,IAAwB,QAoB5B,wDC/CGiB,EARH,WACV,OACE,mCACE,cAAC,EAAD,OCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6c97c945.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ handleInc }) => {\n  return (\n    <>\n      <button name=\"good\" onClick={handleInc}>\n        Good\n      </button>\n      <button name=\"neutral\" onClick={handleInc}>\n        Neutral\n      </button>\n      <button name=\"bad\" onClick={handleInc}>\n        Bad\n      </button>\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  handleInc: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","const Section = ({ title, children }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  countTotalFeedback,\n  countPositiveFeedbackPercentage,\n}) => {\n  return (\n    <>\n      <ul>\n        <li>\n          <p>Good: {good}</p>\n        </li>\n        <li>\n          <p>Neutral: {neutral}</p>\n        </li>\n        <li>\n          <p>Bad: {bad}</p>\n        </li>\n        <li>\n          <p>Total: {countTotalFeedback()}</p>\n        </li>\n        <li>\n          <p>Positive Feedback:{countPositiveFeedbackPercentage()}%</p>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nStatistics.propsTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  countTotalFeedback: PropTypes.func,\n  countPositiveFeedbackPercentage: PropTypes.func,\n}.isRequired;\n\nexport default Statistics;\n","import React, {useState} from \"react\";\nimport FeedbackOptions from \"../feedbackOptions/\";\nimport Section from \"../section/\";\nimport Statistics from \"../statistics/\";\n\nconst Feedback = () => {\n  const [good, setGood]=useState(0);\n  const [neutral, setNeutral]=useState(0);\n  const [bad, setBad]=useState(0);\n\n\n  const handleInc = (event) => {\n    const name = event.target.name;\n\n    switch (name) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        return;\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        return;\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        return;\n\n      default:\n        return;\n    }\n  };\n\n\n\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round(\n        (good / countTotalFeedback()) * 100\n    );\n  };\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions handleInc={handleInc} />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {countTotalFeedback() ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              countTotalFeedback={countTotalFeedback}\n              countPositiveFeedbackPercentage={countPositiveFeedbackPercentage}\n            />\n          ) : (\n            <p>No feedback given</p>\n          )}\n        </Section>\n      </>\n    );\n\n}\n\nexport default Feedback;\n","import \"./App.css\";\nimport React from \"react\";\nimport Feedback from \"./components/feedback\";\n\nconst App = () => {\n  return (\n    <>\n      <Feedback />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}